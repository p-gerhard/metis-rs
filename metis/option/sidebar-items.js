initSidebarItems({"enum":[["CType","Specifies the matching scheme to be used during coarsening."],["IpType","Determines the algorithm used during initial partitioning."],["Numbering","Used to indicate which numbering scheme is used for the adjacency structure of a graph or the element-node structure of a mesh."],["ObjType","Specifies the type of objective."],["PType","Specifies the partitioning method."],["RType","Determines the algorithm used for refinement."]],"struct":[["CCOrder","Specifies if the connected components of the graph should first be identified and ordered separately."],["Compress","Specifies that the graph should be compressed by combining together vertices that have identical adjacency lists."],["Contig","Specifies that the partitioning routines should try to produce partitions that are contiguous."],["DbgLvl","Specifies the amount of progress/debugging information will be printed during the execution of the algorithms."],["MinConn","Specifies that the partitioning routines should try to minimize the maximum degree of the subdomain graph."],["NCuts","Specifies the number of different partitionings that it will compute. The final partitioning is the one that achieves the best edgecut or communication volume. Default is 1."],["NIter","Specifies the number of iterations for the refinement algorithms at each stage of the uncoarsening process."],["NSeps","Specifies the number of different separators that it will compute at each level of nested dissection."],["No2Hop","Specifies that the coarsening will not perform any 2-hop matchings when the standards matching approach fails to sufficiently coarsen the graph."],["PFactor","Specifies the minimum degree of the vertices that will be ordered last."],["Seed","Specifies the seed for the random number generator."],["UFactor","Specifies the maximum allowed load imbalance among the partitions."]],"trait":[["Opt","Trait implemented by METISâ€™ options."]]});